(require str split)
(require str split-lines)
(require str to-chars)

(load-file "mal/aoc.mal")

(def! parse (fn* [file] 
    (let* (input (slurp file)) (map to-chars (split-lines input)))))

(def! right (fn* [point] (list (incr (first point)) (second point))))
(def! left (fn* [point] (list (decr (first point)) (second point))))
(def! up (fn* [point] (list (first point) (incr (second point)))))
(def! down (fn* [point] (list (first point) (decr (second point)))))

(def! right-up (fn* [point] (list (incr (first point)) (incr (second point)))))
(def! right-down (fn* [point] (list (incr (first point)) (decr (second point)))))
(def! left-up (fn* [point] (list (decr (first point)) (incr (second point)))))
(def! left-down (fn* [point] (list (decr (first point)) (decr (second point)))))

(def! find-letter-in-row (fn* [letter row-index]
    (map second
        (filter 
            (fn* [item] (= (first item) letter))
            (map 
                (fn* [item] 
                    (cons (first item) (list (list (second item) (second row-index)))))
                    (zip-with-index (first row-index) 0))))))

(def! find-letter (fn* [letter input] 
    (flatten (map 
        (fn* [row-index] (find-letter-in-row letter row-index))
        (zip-with-index input 0)))))

(def! search1 (fn* [input move] 
    (let* (xs (find-letter "X" input) ms (find-letter "M" input) as (find-letter "A" input) ss (find-letter "S" input)) 
        (filter (fn* [x] 
            (and 
                (exists? (fn* [m] (= m (move x))) ms) 
                (exists? (fn* [a] (= a (move (move x)))) as)
                (exists? (fn* [s] (= s (move (move (move x))))) ss))) xs))))

(def! search2 (fn* [input m1 m2 m3 m4] 
    (let* (ms (find-letter "M" input) as (find-letter "A" input) ss (find-letter "S" input)) 
        (filter (fn* [a] 
            (and 
                (exists? (fn* [m] (= m (m1 a))) ms) 
                (exists? (fn* [m] (= m (m2 a))) ms) 
                (exists? (fn* [s] (= s (m3 a))) ss)
                (exists? (fn* [s] (= s (m4 a))) ss))) as))))

(def! input (parse "input/day4-test.txt"))
;(def! input (parse "input/day4.txt"))

;day4 part1
(println (count (concat 
    (search1 input right)
    (search1 input left)
    (search1 input up)
    (search1 input down)
    (search1 input right-up)
    (search1 input right-down)
    (search1 input left-up)
    (search1 input left-down)
)))

;day4 part2
(println (count (concat 
    (search2 input left-up left-down right-up right-down)
    (search2 input right-up right-down left-up left-down)
    (search2 input left-up right-up left-down right-down)
    (search2 input left-down right-down left-up right-up)
)))
