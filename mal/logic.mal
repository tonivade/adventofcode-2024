;; taken from https://github.com/kanaka/mal/blob/master/impls/lib/trivial.mal

;; Generate a hopefully unique symbol. See section "Plugging the Leaks"
;; of http://www.gigamonkeys.com/book/macros-defining-your-own.html
(def! gensym
  (let* [counter (atom 0)]
    (fn* []
      (symbol (str "G__" (swap! counter (fn* (i) (+ i 1))))))))

;; https://github.com/kanaka/mal/blob/master/impls/lib/test_cascade.mal

;; `(or x1 x2 .. xn x)`
;; is almost rewritten as
;; `(if x1 x1 (if x2 x2 (.. (if xn xn x))))`
;; except that each argument is evaluated at most once.
;; Without arguments, returns `nil`.
(defmacro! or (fn* [& xs]
  (if (< (count xs) 2)
    (first xs)
    (let* [r (gensym)]
      `(let* (~r ~(first xs)) (if ~r ~r (or ~@(rest xs))))))))

;; Search for first evaluation returning `nil` or `false`.
;; Rewrite `x1 x2 .. xn x` as
;;   (let* [r1 x1]
;;     (if r1 test1
;;       (let* [r2 x2]
;;         ..
;;         (if rn
;;           x
;;           rn) ..)
;;       r1))
;; Without arguments, returns `true`.
(defmacro! and
  (fn* (& xs)
    ;; Arguments and the result are interpreted as boolean values.
    (cond (empty? xs)      true
          (= 1 (count xs)) (first xs)
          true             (let* (condvar (gensym))
                             `(let* (~condvar ~(first xs))
                               (if ~condvar (and ~@(rest xs)) ~condvar))))))